'use strict';

namespace test.data {
    export interface IGenCurrencyViewModel { 
        CurrencyRates: CurrencyRateGenViewModel[];
        Id: number;
        Name: string;
        CurrencyCode: string;
    }

    export class CurrencyGenViewModel implements IGenCurrencyViewModel, ICurrency { 
    public CurrencyRates: CurrencyRateGenViewModel[];
    public Id: number;
    public Name: string;
    public CurrencyCode: string;

    public static FIELD_CurrencyRates: string = 'CurrencyRates';
    public static FIELD_Id: string = 'Id';
    public static FIELD_Name: string = 'Name';
    public static FIELD_CurrencyCode: string = 'CurrencyCode';

    constructor() {
    }

    public CloneFromModel(inputModel : Currency) {  
        //CurrencyRateViewModel[]
        this.Id = inputModel.Id;
        this.Name = inputModel.Name;
        this.CurrencyCode = inputModel.CurrencyCode;   
    }

    public CloneFromViewModel(inputViewModel : CurrencyViewModel) {  
        if (inputViewModel.CurrencyRates != null) { this.CurrencyRates = inputViewModel.CurrencyRates; }
        this.Id = inputViewModel.Id;
        this.Name = inputViewModel.Name;
        this.CurrencyCode = inputViewModel.CurrencyCode;   
    }

    public GetCurrency() : Currency {
        var model : Currency = { 
            //CurrencyRateViewModel[]
            Id: this.Id,
            Name: this.Name,
            CurrencyCode: this.CurrencyCode,    
        };

        return model;
    }
}
}
